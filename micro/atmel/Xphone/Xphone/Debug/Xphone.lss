
Xphone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000436  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000436  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000043e  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000195  00000000  00000000  00000916  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00000aab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00000e30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000217  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e7  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000014d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ee       	ldi	r30, 0xE2	; 226
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <main>
  8e:	0c 94 ef 01 	jmp	0x3de	; 0x3de <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <shift_out_328>:
	// NOTE: This function will not set the DDRx registers.
	// The clockPin and dataPin of the port need to be configured as outputs before attempting to shift out data.
// bits is the number of bits that need to be shifted out.
// data is the data to be shifted out.
// bitDirection is 'm' or 'M' if you want to shift out the most significant bit first (MSBF). Any other character will be interpreted as LSBF.
void shift_out_328(char port, uint8_t clockPin, uint8_t dataPin, uint16_t bits, uint64_t data, char bitDirection){
  96:	2f 92       	push	r2
  98:	3f 92       	push	r3
  9a:	4f 92       	push	r4
  9c:	5f 92       	push	r5
  9e:	6f 92       	push	r6
  a0:	7f 92       	push	r7
  a2:	8f 92       	push	r8
  a4:	9f 92       	push	r9
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	1f 92       	push	r1
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	e8 2f       	mov	r30, r24
  c2:	89 01       	movw	r16, r18
	
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
  c4:	f8 2d       	mov	r31, r8
  c6:	ff 7d       	andi	r31, 0xDF	; 223
  c8:	fd 34       	cpi	r31, 0x4D	; 77
  ca:	41 f4       	brne	.+16     	; 0xdc <shift_out_328+0x46>
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
  cc:	22 30       	cpi	r18, 0x02	; 2
  ce:	31 05       	cpc	r19, r1
  d0:	68 f4       	brcc	.+26     	; 0xec <shift_out_328+0x56>
  d2:	41 2c       	mov	r4, r1
  d4:	51 2c       	mov	r5, r1
  d6:	32 01       	movw	r6, r4
  d8:	43 94       	inc	r4
  da:	04 c0       	rjmp	.+8      	; 0xe4 <shift_out_328+0x4e>
// data is the data to be shifted out.
// bitDirection is 'm' or 'M' if you want to shift out the most significant bit first (MSBF). Any other character will be interpreted as LSBF.
void shift_out_328(char port, uint8_t clockPin, uint8_t dataPin, uint16_t bits, uint64_t data, char bitDirection){
	
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
  dc:	41 2c       	mov	r4, r1
  de:	51 2c       	mov	r5, r1
  e0:	32 01       	movw	r6, r4
  e2:	43 94       	inc	r4
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
			mask <<= 1;
	}
	
	for(i=0; i<bits; i++){
  e4:	01 15       	cp	r16, r1
  e6:	11 05       	cpc	r17, r1
  e8:	81 f4       	brne	.+32     	; 0x10a <shift_out_328+0x74>
  ea:	a1 c0       	rjmp	.+322    	; 0x22e <shift_out_328+0x198>
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
  ec:	41 2c       	mov	r4, r1
  ee:	51 2c       	mov	r5, r1
  f0:	32 01       	movw	r6, r4
  f2:	43 94       	inc	r4
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	90 e0       	ldi	r25, 0x00	; 0
			mask <<= 1;
  f8:	44 0c       	add	r4, r4
  fa:	55 1c       	adc	r5, r5
  fc:	66 1c       	adc	r6, r6
  fe:	77 1c       	adc	r7, r7
	unsigned int i;					// this is used to count through the bits
	long unsigned int mask = 1;		// this is used to selectively pick bits from "data" to shift out one at a time.
	
	// set up the initial state of the bit mask
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	80 17       	cp	r24, r16
 104:	91 07       	cpc	r25, r17
 106:	c1 f7       	brne	.-16     	; 0xf8 <shift_out_328+0x62>
 108:	ed cf       	rjmp	.-38     	; 0xe4 <shift_out_328+0x4e>
			case 'B':
				PORTB |=  (1 << dataPin);
				break;
			case 'c':
			case 'C':
				PORTC |=  (1 << dataPin);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	4c 01       	movw	r8, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <shift_out_328+0x80>
 112:	88 0c       	add	r8, r8
 114:	99 1c       	adc	r9, r9
 116:	4a 95       	dec	r20
 118:	e2 f7       	brpl	.-8      	; 0x112 <shift_out_328+0x7c>
 11a:	89 82       	std	Y+1, r8	; 0x01
		// otherwise, set the data bit low
		else{
			switch(port){
				case 'b':
				case 'B':
					PORTB &= ~(1 << dataPin);
 11c:	80 94       	com	r8
			
		//clock data into the register.
		switch(port){
			case 'b':
			case 'B':
				PORTB &= ~(1 << clockPin);
 11e:	02 c0       	rjmp	.+4      	; 0x124 <shift_out_328+0x8e>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <shift_out_328+0x8a>
 128:	98 2e       	mov	r9, r24
 12a:	90 94       	com	r9
				PORTB |=  (1 << clockPin);
 12c:	b8 2f       	mov	r27, r24
 12e:	e1 2c       	mov	r14, r1
 130:	f1 2c       	mov	r15, r1
	}
	
	for(i=0; i<bits; i++){
			
		//set data bit high if needed
		if(data&mask){
 132:	a3 01       	movw	r20, r6
 134:	92 01       	movw	r18, r4
 136:	24 2c       	mov	r2, r4
 138:	2a 20       	and	r2, r10
 13a:	33 2e       	mov	r3, r19
 13c:	3b 20       	and	r3, r11
 13e:	a4 2f       	mov	r26, r20
 140:	ac 21       	and	r26, r12
 142:	5d 21       	and	r21, r13
 144:	22 2d       	mov	r18, r2
 146:	33 2d       	mov	r19, r3
 148:	4a 2f       	mov	r20, r26
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	70 e0       	ldi	r23, 0x00	; 0
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__cmpdi2_s8>
 158:	e9 f0       	breq	.+58     	; 0x194 <shift_out_328+0xfe>
			switch(port){
 15a:	e4 34       	cpi	r30, 0x44	; 68
 15c:	b1 f0       	breq	.+44     	; 0x18a <shift_out_328+0xf4>
 15e:	28 f4       	brcc	.+10     	; 0x16a <shift_out_328+0xd4>
 160:	e2 34       	cpi	r30, 0x42	; 66
 162:	49 f0       	breq	.+18     	; 0x176 <shift_out_328+0xe0>
 164:	e3 34       	cpi	r30, 0x43	; 67
 166:	61 f0       	breq	.+24     	; 0x180 <shift_out_328+0xea>
 168:	2e c0       	rjmp	.+92     	; 0x1c6 <shift_out_328+0x130>
 16a:	e3 36       	cpi	r30, 0x63	; 99
 16c:	49 f0       	breq	.+18     	; 0x180 <shift_out_328+0xea>
 16e:	e4 36       	cpi	r30, 0x64	; 100
 170:	61 f0       	breq	.+24     	; 0x18a <shift_out_328+0xf4>
 172:	e2 36       	cpi	r30, 0x62	; 98
 174:	41 f5       	brne	.+80     	; 0x1c6 <shift_out_328+0x130>
			case 'b':
			case 'B':
				PORTB |=  (1 << dataPin);
 176:	85 b1       	in	r24, 0x05	; 5
 178:	99 81       	ldd	r25, Y+1	; 0x01
 17a:	89 2b       	or	r24, r25
 17c:	85 b9       	out	0x05, r24	; 5
				break;
 17e:	23 c0       	rjmp	.+70     	; 0x1c6 <shift_out_328+0x130>
			case 'c':
			case 'C':
				PORTC |=  (1 << dataPin);
 180:	88 b1       	in	r24, 0x08	; 8
 182:	99 81       	ldd	r25, Y+1	; 0x01
 184:	89 2b       	or	r24, r25
 186:	88 b9       	out	0x08, r24	; 8
				break;
 188:	1e c0       	rjmp	.+60     	; 0x1c6 <shift_out_328+0x130>
			case 'd':
			case 'D':
				PORTD |=  (1 << dataPin);
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	99 81       	ldd	r25, Y+1	; 0x01
 18e:	89 2b       	or	r24, r25
 190:	8b b9       	out	0x0b, r24	; 11
				break;
 192:	19 c0       	rjmp	.+50     	; 0x1c6 <shift_out_328+0x130>
				break;
			}
		}
		// otherwise, set the data bit low
		else{
			switch(port){
 194:	e4 34       	cpi	r30, 0x44	; 68
 196:	a1 f0       	breq	.+40     	; 0x1c0 <shift_out_328+0x12a>
 198:	28 f4       	brcc	.+10     	; 0x1a4 <shift_out_328+0x10e>
 19a:	e2 34       	cpi	r30, 0x42	; 66
 19c:	49 f0       	breq	.+18     	; 0x1b0 <shift_out_328+0x11a>
 19e:	e3 34       	cpi	r30, 0x43	; 67
 1a0:	59 f0       	breq	.+22     	; 0x1b8 <shift_out_328+0x122>
 1a2:	11 c0       	rjmp	.+34     	; 0x1c6 <shift_out_328+0x130>
 1a4:	e3 36       	cpi	r30, 0x63	; 99
 1a6:	41 f0       	breq	.+16     	; 0x1b8 <shift_out_328+0x122>
 1a8:	e4 36       	cpi	r30, 0x64	; 100
 1aa:	51 f0       	breq	.+20     	; 0x1c0 <shift_out_328+0x12a>
 1ac:	e2 36       	cpi	r30, 0x62	; 98
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <shift_out_328+0x130>
				case 'b':
				case 'B':
					PORTB &= ~(1 << dataPin);
 1b0:	85 b1       	in	r24, 0x05	; 5
 1b2:	88 21       	and	r24, r8
 1b4:	85 b9       	out	0x05, r24	; 5
					break;
 1b6:	07 c0       	rjmp	.+14     	; 0x1c6 <shift_out_328+0x130>
				case 'c':
				case 'C':
					PORTC &= ~(1 << dataPin);
 1b8:	88 b1       	in	r24, 0x08	; 8
 1ba:	88 21       	and	r24, r8
 1bc:	88 b9       	out	0x08, r24	; 8
					break;
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <shift_out_328+0x130>
				case 'd':
				case 'D':
					PORTD &= ~(1 << dataPin);
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	88 21       	and	r24, r8
 1c4:	8b b9       	out	0x0b, r24	; 11
					break;
			}
		}
			
		//clock data into the register.
		switch(port){
 1c6:	e4 34       	cpi	r30, 0x44	; 68
 1c8:	d1 f0       	breq	.+52     	; 0x1fe <shift_out_328+0x168>
 1ca:	28 f4       	brcc	.+10     	; 0x1d6 <shift_out_328+0x140>
 1cc:	e2 34       	cpi	r30, 0x42	; 66
 1ce:	49 f0       	breq	.+18     	; 0x1e2 <shift_out_328+0x14c>
 1d0:	e3 34       	cpi	r30, 0x43	; 67
 1d2:	71 f0       	breq	.+28     	; 0x1f0 <shift_out_328+0x15a>
 1d4:	1a c0       	rjmp	.+52     	; 0x20a <shift_out_328+0x174>
 1d6:	e3 36       	cpi	r30, 0x63	; 99
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <shift_out_328+0x15a>
 1da:	e4 36       	cpi	r30, 0x64	; 100
 1dc:	81 f0       	breq	.+32     	; 0x1fe <shift_out_328+0x168>
 1de:	e2 36       	cpi	r30, 0x62	; 98
 1e0:	a1 f4       	brne	.+40     	; 0x20a <shift_out_328+0x174>
			case 'b':
			case 'B':
				PORTB &= ~(1 << clockPin);
 1e2:	85 b1       	in	r24, 0x05	; 5
 1e4:	89 21       	and	r24, r9
 1e6:	85 b9       	out	0x05, r24	; 5
				PORTB |=  (1 << clockPin);
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8b 2b       	or	r24, r27
 1ec:	85 b9       	out	0x05, r24	; 5
				break;
 1ee:	0d c0       	rjmp	.+26     	; 0x20a <shift_out_328+0x174>
			case 'c':
			case 'C':
				PORTC &= ~(1 << clockPin);
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	89 21       	and	r24, r9
 1f4:	88 b9       	out	0x08, r24	; 8
				PORTC |=  (1 << clockPin);
 1f6:	88 b1       	in	r24, 0x08	; 8
 1f8:	8b 2b       	or	r24, r27
 1fa:	88 b9       	out	0x08, r24	; 8
				break;
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <shift_out_328+0x174>
			case 'd':
			case 'D':
				PORTD &= ~(1 << clockPin);
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	89 21       	and	r24, r9
 202:	8b b9       	out	0x0b, r24	; 11
				PORTD |=  (1 << clockPin);
 204:	8b b1       	in	r24, 0x0b	; 11
 206:	8b 2b       	or	r24, r27
 208:	8b b9       	out	0x0b, r24	; 11
			default:
				break;
		}
			
		// modify mask for the next loop iteration.
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
 20a:	fd 34       	cpi	r31, 0x4D	; 77
 20c:	29 f4       	brne	.+10     	; 0x218 <shift_out_328+0x182>
			mask >>= 1;										// shift the mask right (decrease the bit mask).
 20e:	76 94       	lsr	r7
 210:	67 94       	ror	r6
 212:	57 94       	ror	r5
 214:	47 94       	ror	r4
 216:	04 c0       	rjmp	.+8      	; 0x220 <shift_out_328+0x18a>
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
 218:	44 0c       	add	r4, r4
 21a:	55 1c       	adc	r5, r5
 21c:	66 1c       	adc	r6, r6
 21e:	77 1c       	adc	r7, r7
	if(bitDirection == 'm' || bitDirection == 'M'){
		for(i=1; i<bits; i++)	// start the mask at 2^(bits - 1)
			mask <<= 1;
	}
	
	for(i=0; i<bits; i++){
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	e8 1a       	sub	r14, r24
 224:	f8 0a       	sbc	r15, r24
 226:	e0 16       	cp	r14, r16
 228:	f1 06       	cpc	r15, r17
 22a:	09 f0       	breq	.+2      	; 0x22e <shift_out_328+0x198>
 22c:	82 cf       	rjmp	.-252    	; 0x132 <shift_out_328+0x9c>
		if(bitDirection == 'm' || bitDirection == 'M')		// if the bit direction if MSB (Most Significant Bit first),
			mask >>= 1;										// shift the mask right (decrease the bit mask).
		else												// otherwise,
			mask <<= 1;										// shift the mask left  (increase the bit mask).
	}
}
 22e:	0f 90       	pop	r0
 230:	df 91       	pop	r29
 232:	cf 91       	pop	r28
 234:	1f 91       	pop	r17
 236:	0f 91       	pop	r16
 238:	ff 90       	pop	r15
 23a:	ef 90       	pop	r14
 23c:	df 90       	pop	r13
 23e:	cf 90       	pop	r12
 240:	bf 90       	pop	r11
 242:	af 90       	pop	r10
 244:	9f 90       	pop	r9
 246:	8f 90       	pop	r8
 248:	7f 90       	pop	r7
 24a:	6f 90       	pop	r6
 24c:	5f 90       	pop	r5
 24e:	4f 90       	pop	r4
 250:	3f 90       	pop	r3
 252:	2f 90       	pop	r2
 254:	08 95       	ret

00000256 <send_command_PORTD>:
	uint8_t i;
	
	for(i = 0; i < 8; i++) {
		// get last bit and set port bit
		if(command & 128)
			high(PORTD, si_pin);
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	f9 01       	movw	r30, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <send_command_PORTD+0xc>
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <send_command_PORTD+0x8>
 266:	bf 01       	movw	r22, r30
 268:	5e 2f       	mov	r21, r30
		else
			low(PORTD, si_pin);
 26a:	60 95       	com	r22
		
		// clock it in
		low(PORTD, sck_pin);
 26c:	02 c0       	rjmp	.+4      	; 0x272 <send_command_PORTD+0x1c>
 26e:	22 0f       	add	r18, r18
 270:	33 1f       	adc	r19, r19
 272:	8a 95       	dec	r24
 274:	e2 f7       	brpl	.-8      	; 0x26e <send_command_PORTD+0x18>
 276:	32 2f       	mov	r19, r18
 278:	30 95       	com	r19
		high(PORTD, sck_pin);
 27a:	98 e0       	ldi	r25, 0x08	; 8
void send_command_PORTD(uint8_t sck_pin, uint8_t si_pin, uint8_t command) {
	uint8_t i;
	
	for(i = 0; i < 8; i++) {
		// get last bit and set port bit
		if(command & 128)
 27c:	44 23       	and	r20, r20
 27e:	24 f4       	brge	.+8      	; 0x288 <send_command_PORTD+0x32>
			high(PORTD, si_pin);
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	85 2b       	or	r24, r21
 284:	8b b9       	out	0x0b, r24	; 11
 286:	03 c0       	rjmp	.+6      	; 0x28e <send_command_PORTD+0x38>
		else
			low(PORTD, si_pin);
 288:	8b b1       	in	r24, 0x0b	; 11
 28a:	86 23       	and	r24, r22
 28c:	8b b9       	out	0x0b, r24	; 11
		
		// clock it in
		low(PORTD, sck_pin);
 28e:	8b b1       	in	r24, 0x0b	; 11
 290:	83 23       	and	r24, r19
 292:	8b b9       	out	0x0b, r24	; 11
		high(PORTD, sck_pin);
 294:	8b b1       	in	r24, 0x0b	; 11
 296:	82 2b       	or	r24, r18
 298:	8b b9       	out	0x0b, r24	; 11
		// get the next bit
		command = command << 1;
 29a:	44 0f       	add	r20, r20
 29c:	91 50       	subi	r25, 0x01	; 1
#define WRITE_ENABLE 6

void send_command_PORTD(uint8_t sck_pin, uint8_t si_pin, uint8_t command) {
	uint8_t i;
	
	for(i = 0; i < 8; i++) {
 29e:	71 f7       	brne	.-36     	; 0x27c <send_command_PORTD+0x26>
		low(PORTD, sck_pin);
		high(PORTD, sck_pin);
		// get the next bit
		command = command << 1;
	}
}
 2a0:	08 95       	ret

000002a2 <main>:
	//=================================================================
	// setup pins
	//=================================================================
	
	// setup output ports
	set_output(DDRC, p_SR_data);
 2a2:	3c 9a       	sbi	0x07, 4	; 7
	set_output(DDRC, p_SR_RCK);
 2a4:	3b 9a       	sbi	0x07, 3	; 7
	set_output(DDRC, p_SR_SCK);
 2a6:	3a 9a       	sbi	0x07, 2	; 7
	set_input(DDRC, p_input);
 2a8:	3d 98       	cbi	0x07, 5	; 7
	set_output(DDRC, p_key);
 2aa:	39 9a       	sbi	0x07, 1	; 7
	
	// flash memory pins
	set_output(DDRD, p_FLASH_CS);
 2ac:	50 9a       	sbi	0x0a, 0	; 10
	set_input(DDRD, p_FLASH_SO);
 2ae:	51 98       	cbi	0x0a, 1	; 10
	set_output(DDRD, p_FLASH_SCK);
 2b0:	52 9a       	sbi	0x0a, 2	; 10
	set_output(DDRD, p_FLASH_SI);
 2b2:	53 9a       	sbi	0x0a, 3	; 10
	int s = 1, i;
	uint8_t myInput = 0;
	uint32_t address = 0;
	//while(1){
	
	shift_out_328('C', p_SR_SCK, p_SR_data, 8, (64+16+4+1), 'M');
 2b4:	0f 2e       	mov	r0, r31
 2b6:	fd e4       	ldi	r31, 0x4D	; 77
 2b8:	8f 2e       	mov	r8, r31
 2ba:	f0 2d       	mov	r31, r0
 2bc:	0f 2e       	mov	r0, r31
 2be:	f5 e5       	ldi	r31, 0x55	; 85
 2c0:	af 2e       	mov	r10, r31
 2c2:	f0 2d       	mov	r31, r0
 2c4:	b1 2c       	mov	r11, r1
 2c6:	c1 2c       	mov	r12, r1
 2c8:	d1 2c       	mov	r13, r1
 2ca:	e1 2c       	mov	r14, r1
 2cc:	f1 2c       	mov	r15, r1
 2ce:	00 e0       	ldi	r16, 0x00	; 0
 2d0:	10 e0       	ldi	r17, 0x00	; 0
 2d2:	28 e0       	ldi	r18, 0x08	; 8
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	44 e0       	ldi	r20, 0x04	; 4
 2d8:	62 e0       	ldi	r22, 0x02	; 2
 2da:	83 e4       	ldi	r24, 0x43	; 67
 2dc:	0e 94 4b 00 	call	0x96	; 0x96 <shift_out_328>
	high(PORTC, p_SR_RCK);
 2e0:	43 9a       	sbi	0x08, 3	; 8
	low(PORTC, p_SR_RCK);
 2e2:	43 98       	cbi	0x08, 3	; 8
		
	// set cs to inactive state
	high(PORTD, p_FLASH_CS);
 2e4:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e6:	2f ef       	ldi	r18, 0xFF	; 255
 2e8:	88 e0       	ldi	r24, 0x08	; 8
 2ea:	9d e3       	ldi	r25, 0x3D	; 61
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	80 40       	sbci	r24, 0x00	; 0
 2f0:	90 40       	sbci	r25, 0x00	; 0
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <main+0x4a>
 2f4:	00 c0       	rjmp	.+0      	; 0x2f6 <main+0x54>
 2f6:	00 00       	nop
	
	
	
	//while(1){
		// enable write
		low(PORTD, p_FLASH_CS);
 2f8:	58 98       	cbi	0x0b, 0	; 11
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, WRITE_ENABLE);
 2fa:	46 e0       	ldi	r20, 0x06	; 6
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	82 e0       	ldi	r24, 0x02	; 2
 300:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
		high(PORTD, p_FLASH_CS);
 304:	58 9a       	sbi	0x0b, 0	; 11
 306:	87 e8       	ldi	r24, 0x87	; 135
 308:	93 e1       	ldi	r25, 0x13	; 19
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x68>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x6e>
 310:	00 00       	nop
		_delay_ms(1);
	//}
	// write data
	// start transmition
	low(PORTD, p_FLASH_CS);
 312:	58 98       	cbi	0x0b, 0	; 11
	// write command
	send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, WRITE_CMD);
 314:	42 e0       	ldi	r20, 0x02	; 2
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
	// 3 bytes for address
	send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	63 e0       	ldi	r22, 0x03	; 3
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
	send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 328:	40 e0       	ldi	r20, 0x00	; 0
 32a:	63 e0       	ldi	r22, 0x03	; 3
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
	send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	63 e0       	ldi	r22, 0x03	; 3
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
	// data
	send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 255);
 33c:	4f ef       	ldi	r20, 0xFF	; 255
 33e:	63 e0       	ldi	r22, 0x03	; 3
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
	// end transmition
	high(PORTD, p_FLASH_CS);
 346:	58 9a       	sbi	0x0b, 0	; 11
		// 3 bytes for address
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
		// dummy byte
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 348:	d8 e0       	ldi	r29, 0x08	; 8
 34a:	c0 e0       	ldi	r28, 0x00	; 0
	//}
    while (1)
    {
		// read data
		// start transmition
		low(PORTD, p_FLASH_CS);
 34c:	58 98       	cbi	0x0b, 0	; 11
		// write command
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, READ_CMD);
 34e:	4b e0       	ldi	r20, 0x0B	; 11
 350:	63 e0       	ldi	r22, 0x03	; 3
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
		// 3 bytes for address
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 36c:	40 e0       	ldi	r20, 0x00	; 0
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
		// dummy byte
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 2b 01 	call	0x256	; 0x256 <send_command_PORTD>
 380:	4d 2f       	mov	r20, r29
 382:	5c 2f       	mov	r21, r28
		
		myInput = 0;
 384:	a1 2c       	mov	r10, r1
		for(i = 0; i < 8; i++) {
			myInput = (myInput << 1) | get_bit(PIND, p_FLASH_SO);
 386:	89 b1       	in	r24, 0x09	; 9
 388:	86 95       	lsr	r24
 38a:	81 70       	andi	r24, 0x01	; 1
 38c:	aa 0c       	add	r10, r10
 38e:	a8 2a       	or	r10, r24
			high(PORTD, p_FLASH_SCK);
 390:	5a 9a       	sbi	0x0b, 2	; 11
			low(PORTD, p_FLASH_SCK);
 392:	5a 98       	cbi	0x0b, 2	; 11
 394:	41 50       	subi	r20, 0x01	; 1
 396:	51 09       	sbc	r21, r1
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
		// dummy byte
		send_command_PORTD(p_FLASH_SCK, p_FLASH_SI, 0);
		
		myInput = 0;
		for(i = 0; i < 8; i++) {
 398:	b1 f7       	brne	.-20     	; 0x386 <main+0xe4>
			high(PORTD, p_FLASH_SCK);
			low(PORTD, p_FLASH_SCK);
		}
		
		// end transmition
		high(PORTD, p_FLASH_CS);
 39a:	58 9a       	sbi	0x0b, 0	; 11
		
		shift_out_328('C', p_SR_SCK, p_SR_data, 8, myInput, 'M');
 39c:	0f 2e       	mov	r0, r31
 39e:	fd e4       	ldi	r31, 0x4D	; 77
 3a0:	8f 2e       	mov	r8, r31
 3a2:	f0 2d       	mov	r31, r0
 3a4:	b1 2c       	mov	r11, r1
 3a6:	c1 2c       	mov	r12, r1
 3a8:	d1 2c       	mov	r13, r1
 3aa:	e1 2c       	mov	r14, r1
 3ac:	f1 2c       	mov	r15, r1
 3ae:	00 e0       	ldi	r16, 0x00	; 0
 3b0:	10 e0       	ldi	r17, 0x00	; 0
 3b2:	2d 2f       	mov	r18, r29
 3b4:	3c 2f       	mov	r19, r28
 3b6:	44 e0       	ldi	r20, 0x04	; 4
 3b8:	62 e0       	ldi	r22, 0x02	; 2
 3ba:	83 e4       	ldi	r24, 0x43	; 67
 3bc:	0e 94 4b 00 	call	0x96	; 0x96 <shift_out_328>
		high(PORTC, p_SR_RCK);
 3c0:	43 9a       	sbi	0x08, 3	; 8
		low(PORTC, p_SR_RCK);
 3c2:	43 98       	cbi	0x08, 3	; 8
		
		high(PORTC, p_SR_RCK);
		low(PORTC, p_SR_RCK);
		_delay_us(10000);
		*/
    }
 3c4:	c3 cf       	rjmp	.-122    	; 0x34c <main+0xaa>

000003c6 <__cmpdi2_s8>:
 3c6:	00 24       	eor	r0, r0
 3c8:	a7 fd       	sbrc	r26, 7
 3ca:	00 94       	com	r0
 3cc:	2a 17       	cp	r18, r26
 3ce:	30 05       	cpc	r19, r0
 3d0:	40 05       	cpc	r20, r0
 3d2:	50 05       	cpc	r21, r0
 3d4:	60 05       	cpc	r22, r0
 3d6:	70 05       	cpc	r23, r0
 3d8:	80 05       	cpc	r24, r0
 3da:	90 05       	cpc	r25, r0
 3dc:	08 95       	ret

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
